name: Build and Push Docker Image

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    name: OWASP ZAP Scan
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Extract Repository Name
        id: repo_name
        run: |
          REPO_NAME=$(echo '${{ github.repository }}' | cut -d'/' -f2)
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
      - name: Import Secrets
        id: import-secrets
        uses: hashicorp/vault-action@v2.4.0
        with:
          url: https://val.case0sh.com/v1/
          token: ${{ secrets.VAULT_TOKEN }}
          secrets: |
            projects/data/${{ env.REPO_NAME }}/docker image_name | IMAGE_NAME;
            projects/data/${{ env.REPO_NAME }}/docker docker_repo | DOCKER_REPO;
            projects/data/${{ env.REPO_NAME }}/docker docker_username | DOCKER_USERNAME;
            projects/data/${{ env.REPO_NAME }}/docker docker_password | DOCKER_PASSWORD;
            projects/data/${{ env.REPO_NAME }}/docker registry | REGISTRY;


  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Build Docker image
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: .
  #         load: true
  #         tags: ${{ env.IMAGE_NAME }}:test

  #     - name: Run Docker image
  #       run: docker run -d -p 1313:80 --name test-container ${{ env.IMAGE_NAME }}:test

  #     - name: OWASP ZAP Scan
  #       uses: zaproxy/action-baseline@v0.7.0
  #       with:
  #         target: 'http://localhost:1313'
  #         rules_file_name: '.zap/rules.tsv'
  #         cmd_options: '-a'

  trivy-scan:
    name: Trivy vulnerability scan
    runs-on: ubuntu-latest
    steps:
      - name: Extract Repository Name
        id: repo_name
        run: |
          REPO_NAME=$(echo '${{ github.repository }}' | cut -d'/' -f2)
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
      - name: Import Secrets
        id: import-secrets
        uses: hashicorp/vault-action@v2.4.0
        with:
          url: https://val.case0sh.com/v1/
          method: github
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          secrets: |
            projects/data/${{ env.REPO_NAME }}/docker image_name | IMAGE_NAME;
            projects/data/${{ env.REPO_NAME }}/docker docker_repo | DOCKER_REPO;
            projects/data/${{ env.REPO_NAME }}/docker docker_username | DOCKER_USERNAME;
            projects/data/${{ env.REPO_NAME }}/docker docker_password | DOCKER_PASSWORD;
            projects/data/${{ env.REPO_NAME }}/docker registry | REGISTRY;

  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Build Docker image
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: .
  #         load: true
  #         tags: ${{ env.IMAGE_NAME }}:test

  #     - name: Run Trivy vulnerability scanner
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         image-ref: '${{ env.IMAGE_NAME }}:test'
  #         format: 'sarif'
  #         output: 'trivy-results.sarif'
  #         severity: 'CRITICAL,HIGH'

  #     - name: Upload Trivy scan results to GitHub Security tab
  #       uses: github/codeql-action/upload-sarif@v2
  #       with:
  #         sarif_file: 'trivy-results.sarif'

  # build-and-push:
  #   name: Build and Push Docker image
  #   needs: [test, trivy-scan]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Import Secrets
  #       id: import-secrets
  #       uses: hashicorp/vault-action@v2.4.0
  #       with:
  #         url: ${{ secrets.VAULT_URL }}
  #         token: ${{ secrets.VAULT_TOKEN }}
  #         secrets: |
  #           projects/data/${{ env.REPO_NAME }}/docker image_name | IMAGE_NAME;
  #           projects/data/${{ env.REPO_NAME }}/docker docker_repo | DOCKER_REPO;
  #           projects/data/${{ env.REPO_NAME }}/docker docker_username | DOCKER_USERNAME;
  #           projects/data/${{ env.REPO_NAME }}/docker docker_password | DOCKER_PASSWORD;
  #           projects/data/${{ env.REPO_NAME }}/docker registry | REGISTRY;

  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v2

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ env.DOCKER_USERNAME }}
  #         password: ${{ env.DOCKER_PASSWORD }}

  #     - name: Extract metadata for Docker
  #       id: meta
  #       uses: docker/metadata-action@v4
  #       with:
  #         images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
  #         tags: |
  #           type=semver,pattern={{version}}
  #           type=semver,pattern={{major}}.{{minor}}
  #           type=semver,pattern={{major}}
  #           type=ref,event=branch
  #           type=sha

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: .
  #         push: ${{ github.event_name != 'pull_request' }}
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         platforms: linux/amd64,linux/arm64
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max

  # scan-pushed-image:
  #   name: Scan pushed Docker image
  #   needs: build-and-push
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Import Secrets
  #       id: import-secrets
  #       uses: hashicorp/vault-action@v2.4.0
  #       with:
  #         url: ${{ secrets.VAULT_URL }}
  #         token: ${{ secrets.VAULT_TOKEN }}
  #         secrets: |
  #           projects/data/${{ env.REPO_NAME }}/docker image_name | IMAGE_NAME;
  #           projects/data/${{ env.REPO_NAME }}/docker docker_repo | DOCKER_REPO;
  #           projects/data/${{ env.REPO_NAME }}/docker docker_username | DOCKER_USERNAME;
  #           projects/data/${{ env.REPO_NAME }}/docker docker_password | DOCKER_PASSWORD;
  #           projects/data/${{ env.REPO_NAME }}/docker registry | REGISTRY;

  #     - name: Scan image with Trivy
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}'
  #         format: 'table'
  #         exit-code: '1'
  #         ignore-unfixed: true
  #         vuln-type: 'os,library'
  #         severity: 'CRITICAL,HIGH'

  # notify:
  #   name: Notify team
  #   needs: [build-and-push, scan-pushed-image]
  #   runs-on: ubuntu-latest
  #   if: always()
  #   steps:
  #     - name: Import Secrets
  #       id: import-secrets
  #       uses: hashicorp/vault-action@v2.4.0
  #       with:
  #         url: ${{ secrets.VAULT_URL }}
  #         token: ${{ secrets.VAULT_TOKEN }}
  #         secrets: |
  #           projects/data/common TG_CHAT | TG_CHAT;
  #           projects/data/common TG_TOKEN | TG_TOKEN;

  #     - name: Send notification to Telegram
  #       uses: appleboy/telegram-action@master
  #       with:
  #         to: ${{ secrets.TELEGRAM_CHAT_ID }}
  #         githubToken:  ${{ secrets.TELEGRAM_BOT_TOKEN }}
  #         message: |
  #           üì¶ Docker Build & Push Workflow: ${{ job.status }}

  #           Repository: ${{ github.repository }}
  #           Branch: ${{ github.ref }}
  #           Commit: ${{ github.sha }}

  #           Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
  #           Status:
  #           - Test: ${{ needs.test.result }}
  #           - Trivy Scan: ${{ needs.trivy-scan.result }}
  #           - Build and Push: ${{ needs.build-and-push.result }}
  #           - Scan Pushed Image: ${{ needs.scan-pushed-image.result }}

  #           ${{ job.status == 'failure' && '‚ùóÔ∏è Attention required! Some steps failed.' || '‚úÖ All steps completed successfully.' }}
